:root {
  --ff-base: "DM Sans", serif;
  --ff-accent: "Stalinist One", sans-serif;

  --fs-400: 1.063rem;
  --fs-500: 1.375rem;
  --fs-900: 2.25rem;

  --fw-400: 400;
  --fw-700: 700;

  --clr-neutral-100: 0 0% 100%;

  --grid-row-gap: 1.5rem;
  --clamp-spacing: clamp(1rem, -1.8571rem + 14.2857vw, 5rem);
}

$tablet-width: 48em;
$desktop-width: 80em;

@media (min-width: $tablet-width) {
  :root {
    --fs-900: 4.375rem;
    --grid-row-gap: 3rem;
  }
}

/* Resets */
*,
*::before,
*::after {
  box-sizing: border-box;
}

body,
h1,
h2,
h3,
p {
  margin: 0;
}

input,
button {
  font: inherit;
}

a {
  color: inherit;
  text-decoration: none;
}

ul[class],
ol[class] {
  list-style: none;
  padding: 0;
}

img {
  max-width: 100%;
  height: auto;
  display: block;
}

body {
  font-family: var(--ff-base);
  color: hsl(var(--clr-neutral-100));
  line-height: 1.6;
  min-height: 100svh;
  background: url(../assets/mars-bg.jpg);
  background-size: cover;
  background-position: center center;
  padding: 1rem 0;
  display: grid;
  // 1fr should be second param to the minmax func !!!
  grid-template-columns: minmax(var(--clamp-spacing), 1fr) minmax(0, 70rem) minmax(
      var(--clamp-spacing),
      1fr
    );

  @media (min-width: $tablet-width) {
    padding: 2.5rem 0;
  }
}

main {
  display: grid;
  grid-column: 2 / 3;
  row-gap: var(--grid-row-gap);
  grid-template:
    "logo nav action" min-content
    "invasion invasion invasion" auto
    "terms terms terms" auto
    "footer footer footer" min-content / auto 1fr auto;
  align-items: center;
}

@media (min-width: $desktop-width) {
  footer {
    align-self: end;
    margin-bottom: calc(var(--grid-row-gap) * -1);
  }
}

/* General */
section {
  padding: 2.5rem 0;
}

@media (min-width: $tablet-width) {
  section {
    padding: 3.5rem 0;
  }
}

.page-title {
  font-size: var(--fs-500);
  text-transform: uppercase;

  @media (min-width: $tablet-width) {
    text-align: center;
  }
}

/* Components & utilities */
.split {
  display: flex;
  flex-direction: column;
  gap: var(--split-gap, 1rem);

  @media (min-width: $desktop-width) {
    flex-direction: row;
  }
}

.btn {
  display: inline-block;
  padding: 0.5em 1em;
  cursor: pointer;
  border: 3px solid hsl(var(--clr-neutral-100));
  background: none;
  font-weight: var(--fw-700);
}

.plus {
  position: absolute;

  &::after {
    position: absolute;
    content: "\002B";
    font-size: 2rem;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  &.plus-top-left {
    left: 0;
    top: 0;
    transform: translate(-50%, -50%);
  }

  &.plus-top-right {
    right: 0;
    top: 0;
    transform: translate(50%, -50%);
  }

  &.plus-bottom-left {
    bottom: 0;
    left: 0;
    transform: translate(-50%, 50%);
  }

  &.plus-bottom-right {
    bottom: 0;
    right: 0;
    transform: translate(50%, 50%);
  }
}

/* Grid layout */
.logo {
  grid-area: logo;
}

.primary-nav {
  grid-area: footer;
  color: hsl(var(--clr-neutral-100) / 0.7);

  @media (width < #{$desktop-width}) {
    border: 1px solid hsl(var(--clr-neutral-100) / 0.2);

    @supports (backdrop-filter: blur(1rem)) {
      backdrop-filter: blur(1rem);
      background: hsl(var(--clr-neutral-100) / 0.05);
    }
  }

  @media (min-width: $desktop-width) {
    grid-area: nav;
    justify-self: end;
  }

  .primary-nav__list {
    margin: 0;
    display: flex;
    justify-content: space-evenly;
    gap: 1rem;
    padding: 1em;
  }
}

.join-btn {
  grid-area: action;
}

.invasion {
  align-self: start;
  grid-area: invasion;
}

/* Invasion */
.invasion {
  .page-title {
    margin-bottom: 1rem;
  }

  .countdown {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;

    @media (min-width: $desktop-width) {
      grid-template-columns: repeat(4, 1fr);
    }

    .countdown-item-wrapper {
      position: relative;

      .countdown-item {
        padding: 1.5em 1em;
        text-align: center;
        border: 1px solid hsl(var(--clr-neutral-100) / 0.2);

        @media (min-width: $desktop-width) {
          display: grid;
          grid-auto-rows: 1fr 2fr;
        }

        &.current {
          transform: none;
        }

        &.current.animating {
          transform-origin: 0 0;
          animation: rotate 500ms linear;
        }

        &.next {
          position: absolute;
          inset: 0;
          z-index: -1;
        }

        &.transparent {
          opacity: 0;
        }

        &.next.animating {
          // if set to finish before rotation animation (current behaviour), delay should be max (rotation time - fade in time - ~~16ms rotation end handler min execution time)
          animation: fade-in 200ms 200ms linear;
        }

        .count {
          font-family: var(--ff-accent);
          font-size: var(--fs-900);
        }
      }
    }
  }
}

/* Footer */
footer {
  justify-content: space-between;
  grid-area: terms;

  .terms {
    color: hsl(var(--clr-neutral-100) / 0.8);
  }

  .copyright {
    color: hsl(var(--clr-neutral-100) / 0.5);
  }
}

@keyframes rotate {
  100% {
    transform: rotate3d(1, 0, 0, -90deg);
  }
}

@keyframes fade-in {
  100% {
    opacity: 1;
  }
}
